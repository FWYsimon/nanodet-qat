# nanodet-plus-m_320
# COCO mAP(0.5:0.95) = 0.270
#             AP_50  = 0.418
#             AP_75  = 0.281
#           AP_small = 0.083
#               AP_m = 0.278
#               AP_l = 0.451
save_dir: workspace/nanodet-plus-m_qat_320
model:
  quantization: True
  # weight_averager:
  #   name: ExpMovingAverager
  #   decay: 0.9998
  arch:
    name: QuantizableNanoDetPlus
    detach_epoch: 10
    backbone:
      name: QuantizableMobileNetV2
      # block: QuantizableInvertedResidual
      # model_size: 1.0x
      # out_stages: [2,3,4]
      out_stages: [2,4,6]
      # activation: LeakyReLU
    fpn:
      name: QuantizableGhostPAN
      # block: QuantizableGhostBlocks
      # bottleneck: QuantizableGhostBottleneck
      # module: QuantizableGhostModule
      # in_channels: [116, 232, 464]
      in_channels: [32, 96, 1280]
      out_channels: 96
      kernel_size: 5
      num_extra_level: 1
      use_depthwise: True
      # activation: LeakyReLU
      activation: ReLU
    head:
      name: QuantizableNanoDetPlusHead
      num_classes: 1
      input_channel: 96
      feat_channels: 96
      stacked_convs: 2
      kernel_size: 5
      strides: [8, 16, 32, 64]
      # activation: LeakyReLU
      activation: ReLU
      reg_max: 7
      norm_cfg:
        type: BN
      loss:
        loss_qfl:
          name: QualityFocalLoss
          use_sigmoid: True
          beta: 2.0
          loss_weight: 1.0
        loss_dfl:
          name: DistributionFocalLoss
          loss_weight: 0.25
        loss_bbox:
          name: GIoULoss
          loss_weight: 2.0
    # Auxiliary head, only use in training time.
    aux_head:
      name: QuantizableSimpleConvHead
      num_classes: 1
      input_channel: 192
      feat_channels: 192
      stacked_convs: 4
      strides: [8, 16, 32, 64]
      # activation: LeakyReLU
      activation: ReLU
      reg_max: 7
data:
  train:
    name: CocoDataset2
    img_path: ''
    ann_path: /data-nbd/xiaoya/50.json
    input_size: [320,320] #[w,h]
    keep_ratio: False
    pipeline:
      perspective: 0.0
      scale: [0.6, 1.4]
      stretch: [[0.8, 1.2], [0.8, 1.2]]
      rotation: 0
      shear: 0
      translate: 0.2
      flip: 0.5
      brightness: 0.2
      contrast: [0.6, 1.4]
      saturation: [0.5, 1.2]
      normalize: [[103.53, 116.28, 123.675], [57.375, 57.12, 58.395]]
  val:
    name: CocoDataset2
    img_path: ''
    ann_path: /data-nbd/xiaoya/50.json
    input_size: [320,320] #[w,h]
    keep_ratio: False
    pipeline:
      normalize: [[103.53, 116.28, 123.675], [57.375, 57.12, 58.395]]
device:
#  gpu_ids: [0, 1, 2, 3] # Set like [0, 1, 2, 3] if you have multi-GPUs
  gpu_ids: [0]
  workers_per_gpu: 8
  batchsize_per_gpu: 24
schedule:
#  resume:
#  load_model:
  optimizer:
    name: AdamW
    lr: 0.001
    weight_decay: 0.05
  warmup:
    name: linear
    steps: 500
    ratio: 0.0001
  total_epochs: 1
  lr_schedule:
    name: CosineAnnealingLR
    T_max: 300
    eta_min: 0.00005
  val_intervals: 10
grad_clip: 35
evaluator:
  name: CocoDetectionEvaluator
  save_key: mAP
log:
  interval: 50

class_names: ['obj']
